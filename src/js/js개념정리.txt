** innerHTML 와 insertAdjacentHTML의 차이 

innerHTML: 기존의 모든 HTML 내용이 새로운 HTML로 완전히 대체되는 것 
부분적인 변경이 필요한 경우에는 innerHTML을 사용하면 성능이 저하될 수 있음. 
 또한, 이 방법은 기존의 HTML 요소에 바인딩된 모든 이벤트 핸들러를 제거



insertAdjacentHTML: 특정 위치에 HTML을 삽입 가능 
'beforebegin', 'afterbegin', 'beforeend', 'afterend' 네 가지 위치 중 하나를 선택할 수 있음. 
 이 방법은 새로운 HTML을 존재하는 HTML 요소와 병합하므로, innerHTML보다 더 효율적일 수 있습니다. 


 이벤트 위임 

이벤트 위임(event delegation)은 이벤트 리스너를 하위 요소 각각에 개별적으로 추가하는 대신 상위 요소에 한 번만 추가하는 방법입니다. 이 방법을 사용하면 동적으로 추가되는 요소에 대해 자동으로 이벤트가 적용되며, 이벤트 리스너를 관리하는 것이 훨씬 효율적이고 쉬워집니다.

이벤트 위임이 가능한 이유는 이벤트 버블링(event bubbling) 때문입니다. 이벤트 버블링은 특정 요소에서 이벤트가 발생했을 때, 그 요소를 포함하고 있는 상위 요소들로 이벤트가 전달되는 현상을 말합니다.

예를 들어, 여러 개의 리스트 아이템이 있고 각각의 아이템에 클릭 이벤트를 적용하려고 할 때, 이벤트 위임을 사용하면 아이템이 동적으로 추가되거나 제거될 때마다 이벤트 리스너를 추가하거나 제거할 필요가 없습니다. 대신, 상위 요소인 리스트에 한 번만 이벤트 리스너를 추가하고, 이벤트가 발생했을 때 이벤트 대상이 어떤 아이템인지 확인해서 적절한 동작을 수행하면 됩니다.

여기서는 $("#espresso-menu-list").addEventListener("click", (e) => {...} 에서 $("#espresso-menu-list") 요소(즉, 메뉴 리스트의 부모 요소)에 클릭 이벤트 리스너를 달고 있습니다. 그리고 이벤트 객체의 target 속성을 통해 실제로 클릭된 요소를 파악하고, 해당 요소가 메뉴 수정 버튼(menu-edit-button)인 경우 updateMenuName(e) 함수를 실행합니다.

updateMenuName(e) 함수 내부에서는 e.target.closest("li").querySelector(".menu-name")를 통해 클릭된 수정 버튼이 속한 메뉴 아이템의 이름을 가져옵니다. 그리고 prompt를 통해 새로운 메뉴 이름을 입력받아, 해당 메뉴 아이템의 이름을 수정하게 됩니다.

 ** const menuName = e.target.closest("li").querySelector(".menu-name").innerText;
 "이벤트가 발생한 요소로부터 가장 가까운 상위의 li 요소를 찾고, 그 li 요소 내부에서 menu-name 클래스를 가진 첫 번째 요소를 찾아라"


let menuName = e.target.closest("li").querySelector(".menu-name").innerText;
menuName = updatedMenuName; 이 코드와 e.target.closest("li").querySelector(".menu-name").innerText = updatedMenuName; 
이 코드의 차이는 다음과 같습니다:

menuName = updatedMenuName; : 이 코드는 menuName 변수의 값을 updatedMenuName으로 업데이트합니다. 그러나 이 코드는 DOM에 아무런 영향을 미치지 않습니다. 다시 말해, 실제 웹페이지의 사용자 인터페이스는 이 코드 실행 후에도 바뀌지 않습니다. 이 코드는 Javascript 내에서만 변수의 값을 변경하며 이후 코드에서 menuName 변수를 사용하게 되면 업데이트된 값을 갖게 됩니다.

e.target.closest("li").querySelector(".menu-name").innerText = updatedMenuName; : 이 코드는 실제로 웹페이지에 보이는 해당 메뉴 이름을 사용자가 입력한 updatedMenuName으로 바꿉니다. 이는 DOM (Document Object Model)을 직접 수정하여 사용자에게 보이는 웹페이지의 내용을 변경합니다.

따라서, menuName = updatedMenuName;은 메모리에 저장된 변수 값을 변경하는 데 사용되고, e.target.closest("li").querySelector(".menu-name").innerText = updatedMenuName; 코드는 실제 웹페이지의 메뉴 이름을 변경하는 데 사용됩니다. 이 때문에, 이 두 줄의 코드가 동일한 작업을 수행하는 것처럼 보일 수 있지만 실제로는 다른 역할을 합니다.

*** e.target.closest("li").querySelector(".menu-name").innerText 이 코드가 돔에 영향을 주는 이유 

이 코드는 DOM (Document Object Model)에 직접적으로 영향을 주는 코드입니다.

DOM은 웹 페이지의 구조를 표현하는 방식으로, JavaScript와 같은 스크립팅 언어를 사용해 DOM을 변경하면 웹 페이지의 내용과 구조를 동적으로 변경할 수 있습니다.

코드에서 e.target은 이벤트가 발생한 HTML 요소를 가리킵니다. 여기서 이벤트는 'click' 이벤트를 가리키고 있습니다. .closest("li")은 이벤트가 발생한 요소에서 가장 가까운 부모 'li' 요소를 찾는 메소드입니다.

.querySelector(".menu-name")은 'li' 요소 내에서 '.menu-name' 클래스를 가진 첫번째 요소를 선택합니다. 그리고 .innerText는 그 요소의 텍스트 내용을 참조하거나 변경할 수 있습니다.

따라서, e.target.closest("li").querySelector(".menu-name").innerText 코드는 사용자가 클릭한 버튼이 속한 'li' 요소 내부의 '.menu-name' 클래스를 가진 요소의 텍스트를 참조하거나 수정하는 코드입니다. 이 때 .innerText 프로퍼티에 새로운 값을 할당하면, 해당 요소의 텍스트 내용이 새로운 값으로 변경되며, 이는 웹 페이지의 구조와 내용을 변경하므로 DOM에 영향을 미칩니다.


07.09 
얻은 인사이트 

1. 함수를 기능뿐만 아니라 return을 사용하여 템플릿을 만들 때에도 사용한다는 것에 익숙해지기 
2. 함수안에서 조건에 따라 실행여부 차이를 둔다면 return 사용하기 
3. 객체 안에 함수 저장하는 것이 가능하다 